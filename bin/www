#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('patroleum-software:server');
var http = require('http');
const path = require('path');
const config = require('config');
const socketIO = require('socket.io');
const mysql = require('mysql');
const database = require('../middlewares/database');
const common = require("../middlewares/common");

/**
 * Get port from environment and store in Express.
 */

const   httpport = normalizePort(process.env.PORT || config.get('host').httpport || 1210),
        httpsport = normalizePort(process.env.SECURE_PORT || config.get('host').httpsport || 1280);

app.set('port', httpport);

app.listen(httpport);

let activeSockets = [];
let activeUsers = new Object();

/**
 * Create HTTP server.
 */

//var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(httpport);
//server.on('error', onError);
//server.on('listening', onListening);

var mysqlCon = database.getDBConnection(config);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof httpport === 'string'
    ? 'Pipe ' + httpport
    : 'Port ' + httpport;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
